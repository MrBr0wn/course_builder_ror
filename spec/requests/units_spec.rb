require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/units", type: :request do
  fixtures :all

  # This should return the minimal set of attributes required to create a valid
  # Unit. As you add validations to Unit, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: 'Name 1',
      body: 'Body 1',
      position: 1
    }
  }

  let(:invalid_attributes) {
    {
      name: '',
      body: '',
      position: 1
    }
  }

  describe "GET /new" do
    it "renders a successful response" do
      course = courses(:course_1)
      get new_course_unit_url(course)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      unit = Unit.create! valid_attributes
      course = courses(:course_1)
      get edit_course_unit_url(course, unit)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Unit" do
        course = courses(:course_1)
        expect {
          post course_units_path(course), params: { course_id: course.id, unit: valid_attributes }
        }.to change(Unit, :count).by(1)
      end

      it "redirects to the courses" do
        course = courses(:course_1)
        post course_units_path(course), params: { course_id: course.id, unit: valid_attributes }
        expect(response).to redirect_to(edit_course_url(course))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Unit" do
        course = courses(:course_1)
        expect {
          post course_units_path(course), params: { course_id: course.id, unit: invalid_attributes }
        }.to change(Unit, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        course = courses(:course_1)
        post course_units_path(course), params: { course_id: course.id, unit: invalid_attributes }
        expect(response).to have_http_status('422')
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: 'Name updated',
          body: 'Body updated',
          position: 2
        }
      }

      it "updates the requested unit" do
        unit = Unit.create! valid_attributes
        course = courses(:course_1)
        patch course_unit_url(course, unit), params: { course_id: course.id, unit: new_attributes }
        unit.reload
        expect(unit.name).to eq('Name updated')
      end

      it "redirects to the unit" do
        unit = Unit.create! valid_attributes
        course = courses(:course_1)
        patch course_unit_url(course, unit), params: { course_id: course.id, unit: new_attributes }
        unit.reload
        expect(response).to redirect_to(edit_course_url(course))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        unit = Unit.create! valid_attributes
        course = courses(:course_1)
        patch course_unit_url(course, unit), params: { course_id: course.id, unit: invalid_attributes }
        expect(response).to have_http_status('422')
      end
    end
  end
end
